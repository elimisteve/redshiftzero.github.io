<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Redshiftzero</title>
    <link>https://redshiftzero.github.io/post/</link>
    <description>Recent content in Posts on Redshiftzero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://redshiftzero.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protecting journalists from malware using QubesOS</title>
      <link>https://redshiftzero.github.io/securedrop-qubes-workstation/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/securedrop-qubes-workstation/</guid>
      <description>Earlier this year at USENIX Enigma, I presented some recent work towards rearchitecting the SecureDrop journalist experience.
In SecureDrop we currently use an airgapped workstation for viewing documents to reduce the impact of malware present in malicious documents. This presents challenges in terms of maintenance, usability, and even security (i.e. airgaps don&amp;rsquo;t receive automatic updates).
The basic idea of the rearchitecture of the journalist experience is to replace SecureDrop&amp;rsquo;s multi-machine airgap with a single machine using Qubes (Xen) for compartmentalization.</description>
    </item>
    
    <item>
      <title>Using HTTPS Everywhere rules for SecureDrop onion names</title>
      <link>https://redshiftzero.github.io/securedrop-httpse/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/securedrop-httpse/</guid>
      <description>A fun small project I worked on earlier this year was creating an HTTPS Everywhere custom ruleset channel for the SecureDrop project. HTTPS Everywhere is a popular browser extension maintained by EFF that rewrites HTTP URLs to HTTPS when possible. A set of rules is used to determine how URLs should be rewritten. HTTPS Everywhere is included in Tor Browser to reduce the impact of malicious exit nodes.
This is relevant for SecureDrop, because each news organization advertises an onion URL that corresponds to the web application (&amp;ldquo;source interface&amp;rdquo;) where a source should upload documents.</description>
    </item>
    
    <item>
      <title>Handling equal priority jobs using queue.PriorityQueue</title>
      <link>https://redshiftzero.github.io/priority-queue/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/priority-queue/</guid>
      <description>A queue retrives items in FIFO (first in, first out) order. A priority queue retrieves item based on priority, higher priority items come first. Well, what happens if you submit items that have equal priorities? It depends on how the priority queue was implemented. Read on for how this is handled in the Python standard library&amp;rsquo;s queue.PriorityQueue.
Let&amp;rsquo;s see queue.PriorityQueue in action in a simple case:
&amp;gt;&amp;gt;&amp;gt; from queue import PriorityQueue &amp;gt;&amp;gt;&amp;gt; q = PriorityQueue() &amp;gt;&amp;gt;&amp;gt; q.</description>
    </item>
    
    <item>
      <title>A pytest fixture for image similarity</title>
      <link>https://redshiftzero.github.io/pytest-image/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/pytest-image/</guid>
      <description>When testing codepaths that generate images, one might want to ensure that the generated image is what is expected. Matplotlib has a nice decorator @image_comparison that can be applied for this purpose, but looking at the implementation, it&amp;rsquo;s pretty tied to the matplotlib Figure object. I wanted something generic to use with PNGs.
I ended up writing a pytest fixture that would compare the image generated during the test with a baseline image (in tests/baseline_images as in the matplotlib implementatino).</description>
    </item>
    
    <item>
      <title>How to apply unittest.mock.patch</title>
      <link>https://redshiftzero.github.io/unittest-mock-patch/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/unittest-mock-patch/</guid>
      <description>I&amp;rsquo;ve noticed a common area of misunderstanding for people newer to Python testing is how to apply mock.patch and where to patch (i.e. what the target positional argument to unittest.mock.patch should be), so I made a video explaining:
 </description>
    </item>
    
    <item>
      <title>Implementing the CBC padding oracle attack</title>
      <link>https://redshiftzero.github.io/cbc-padding/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/cbc-padding/</guid>
      <description>The CBC padding oracle attack demonstrates how what might initially seem like a small issue can balloon into a devastating attack that can result in total reconstruction of the plaintext by the attacker. It&amp;rsquo;s also one of the harder challenges in Set 3 of Cryptopals.
The problem It goes like this: an attacker has access to an oracle that will take a ciphertext (i.e. what we need to decrypt) and return a boolean indicating whether or not the padding was valid.</description>
    </item>
    
    <item>
      <title>Using pyreverse to generate UML class diagrams</title>
      <link>https://redshiftzero.github.io/pyreverse-uml/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/pyreverse-uml/</guid>
      <description>Recently I wanted to generate UML (Unified Modeling Language) diagrams of the structure of an existing codebase for the purpose of having an architecture discussion.
I was wondering if there was a tool to generate UML diagrams in Python to save me some manual work.
Enter pyreverse: it comes installed with pylint which is a very common development dependency in Python. pyreverse enables you to point to the code you want UML diagrams of, here in my example I was generating a diagram of a project called securedrop-export:</description>
    </item>
    
    <item>
      <title>Debugging programs with pdb</title>
      <link>https://redshiftzero.github.io/pdb-debugging/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/pdb-debugging/</guid>
      <description>I recently decided to try my hand at making YouTube videos. I&amp;rsquo;m planning on mostly making videos about topics I commonly find myself explaining to people, so here&amp;rsquo;s the first, on using pdb, the built-in debugger in the Python standard library.
 </description>
    </item>
    
    <item>
      <title>Strategies for handling flaky test suites</title>
      <link>https://redshiftzero.github.io/test-flakes/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/test-flakes/</guid>
      <description>Test flakes are tests that occasionally fail due to a variety of potential reasons including network instability (for tests making network calls that are not mocked) and other non-deterministic behavior. Test flakes are problematic as they reduce confidence in the results of test runs: they condition developers that the test suite cannot be relied on, and as such can result in legitimate bugs being ignored due to alert fatigue.</description>
    </item>
    
    <item>
      <title>Collision attacks and the birthday paradox</title>
      <link>https://redshiftzero.github.io/birthday-attacks/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/birthday-attacks/</guid>
      <description>How many people do you need in a room before there is a 50% chance that least two of them share the same birthday? It&amp;rsquo;s only 23, though unless you have heard about this paradox before, you might expect it to be much larger. This is the well-known birthday paradox: it&amp;rsquo;s called a paradox only because collisions happen much faster than one naively expects. Collisions here means an event where two or more observed values are equal.</description>
    </item>
    
  </channel>
</rss>