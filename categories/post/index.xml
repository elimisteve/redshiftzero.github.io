<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Redshiftzero</title>
    <link>https://redshiftzero.github.io/categories/post/</link>
    <description>Recent content in Post on Redshiftzero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://redshiftzero.github.io/categories/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Investigating the Signal Protocol, Part 3: Web applications</title>
      <link>https://redshiftzero.github.io/signal-webapps/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-webapps/</guid>
      <description>Next in the series, I investigate current messaging applications that both provide web applications and are using the Signal Protocol (or a protocol very similar or derived from Signal), here specifically Wire and Whatsapp. I&amp;rsquo;m not looking into the voice and video aspects, just the messaging and file sharing capabilities as I&amp;rsquo;m investigating to see how a similar approach could be used for SecureDrop, where voice/video isn&amp;rsquo;t an option. As always, if you have thoughts on this or notice errors, feel free to drop me a note on Twitter or by email.</description>
    </item>
    
    <item>
      <title>Investigating the Signal Protocol, Part 2: Groups, devices</title>
      <link>https://redshiftzero.github.io/signal-group-multidevice/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-group-multidevice/</guid>
      <description>Next in the series, I investigate how groups and multi-device support are handled. If you have thoughts on this or notice any errors, feel free to drop me a note on Twitter or by email.
Groups Signal allows private groups where the server doesn&amp;rsquo;t have access to the group metadata, including the list of members in each group. Servers cannot even distinguish group from direct messages.
Let&amp;rsquo;s say a group contains two users, Aliceüëßüèº and Bobüë¶üèΩ, and a third user Jenüßô wants to send the group a message.</description>
    </item>
    
    <item>
      <title>Investigating the Signal Protocol, Part 1: Foundations</title>
      <link>https://redshiftzero.github.io/signal-protocol/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-protocol/</guid>
      <description>I&amp;rsquo;ve been investigating applications that use the Signal Protocol in order to determine if the Signal Protocol for asynchronous messaging might be appropriate for use for applying to SecureDrop messaging in the future. In this post are some notes from reading the Signal Protocol specifications, which I thought might be a useful reference and explanation for others. If you notice an error, or have other thoughts on anything here, feel free to drop me a note on Twitter or by email.</description>
    </item>
    
    <item>
      <title>Scanning for onion service availability</title>
      <link>https://redshiftzero.github.io/onion-available/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/onion-available/</guid>
      <description>Secure The News (STN) is a project by Freedom of the Press Foundation to track and advocate for security and privacy technologies in news organizations. I&amp;rsquo;ve been working a bit on expanding the scope of STN from its original goal, HTTPS adoption, to how news sites treat Tor users.
The first expansion is to scan for onion service availability using the the Onion-Location header (or its presence in a &amp;lt;meta&amp;gt; tag in the site&amp;rsquo;s page content).</description>
    </item>
    
    <item>
      <title>Tracking which wheels can be reproducibly built</title>
      <link>https://redshiftzero.github.io/reproducible-wheels/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/reproducible-wheels/</guid>
      <description>Being able to reproducibly build binary artifacts means that users, developers, and others can agree that the shipped artifact was correctly built from the source code (that one can inspect), and no intentional or unintentional malicious code was introduced during the build process.
One hiccup we&amp;rsquo;ve encountered in SecureDrop development is that not all Python wheels can be built reproducibly. We ship multiple (Python) projects in debian packages, with Python dependencies included in those packages as wheels.</description>
    </item>
    
    <item>
      <title>Protecting journalists from malware using QubesOS</title>
      <link>https://redshiftzero.github.io/securedrop-qubes-workstation/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/securedrop-qubes-workstation/</guid>
      <description>Earlier this year at USENIX Enigma, I presented some recent work towards rearchitecting the SecureDrop journalist experience.
In SecureDrop we currently use an airgapped workstation for viewing documents to reduce the impact of malware present in malicious documents. This presents challenges in terms of maintenance, usability, and even security (i.e. airgaps don&amp;rsquo;t receive automatic updates).
The basic idea of the rearchitecture of the journalist experience is to replace SecureDrop&amp;rsquo;s multi-machine airgap with a single machine using Qubes (Xen) for compartmentalization.</description>
    </item>
    
    <item>
      <title>Using HTTPS Everywhere rules for SecureDrop onion names</title>
      <link>https://redshiftzero.github.io/securedrop-httpse/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/securedrop-httpse/</guid>
      <description>A fun small project I worked on earlier this year was creating an HTTPS Everywhere custom ruleset channel for the SecureDrop project. HTTPS Everywhere is a popular browser extension maintained by EFF that rewrites HTTP URLs to HTTPS when possible. A set of rules is used to determine how URLs should be rewritten. HTTPS Everywhere is included in Tor Browser to reduce the impact of malicious exit nodes.
This is relevant for SecureDrop, because each news organization advertises an onion URL that corresponds to the web application (&amp;ldquo;source interface&amp;rdquo;) where a source should upload documents.</description>
    </item>
    
    <item>
      <title>Handling equal priority jobs using queue.PriorityQueue</title>
      <link>https://redshiftzero.github.io/priority-queue/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/priority-queue/</guid>
      <description>A queue retrives items in FIFO (first in, first out) order. A priority queue retrieves item based on priority, higher priority items come first. Well, what happens if you submit items that have equal priorities? It depends on how the priority queue was implemented. Read on for how this is handled in the Python standard library&amp;rsquo;s queue.PriorityQueue.
Let&amp;rsquo;s see queue.PriorityQueue in action in a simple case:
&amp;gt;&amp;gt;&amp;gt; from queue import PriorityQueue &amp;gt;&amp;gt;&amp;gt; q = PriorityQueue() &amp;gt;&amp;gt;&amp;gt; q.</description>
    </item>
    
    <item>
      <title>A pytest fixture for image similarity</title>
      <link>https://redshiftzero.github.io/pytest-image/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/pytest-image/</guid>
      <description>When testing codepaths that generate images, one might want to ensure that the generated image is what is expected. Matplotlib has a nice decorator @image_comparison that can be applied for this purpose, but looking at the implementation, it&amp;rsquo;s pretty tied to the matplotlib Figure object. I wanted something generic to use with PNGs.
I ended up writing a pytest fixture that would compare the image generated during the test with a baseline image (in tests/baseline_images as in the matplotlib implementatino).</description>
    </item>
    
    <item>
      <title>How to apply unittest.mock.patch</title>
      <link>https://redshiftzero.github.io/unittest-mock-patch/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/unittest-mock-patch/</guid>
      <description>I&amp;rsquo;ve noticed a common area of misunderstanding for people newer to Python testing is how to apply mock.patch and where to patch (i.e. what the target positional argument to unittest.mock.patch should be), so I made a video explaining:
 </description>
    </item>
    
  </channel>
</rss>