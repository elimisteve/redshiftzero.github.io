<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SecureDrop on Redshiftzero</title>
    <link>https://www.redshiftzero.com/tags/securedrop/</link>
    <description>Recent content in SecureDrop on Redshiftzero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.redshiftzero.com/tags/securedrop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protecting journalists from malware using QubesOS</title>
      <link>https://www.redshiftzero.com/securedrop-qubes-workstation/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.redshiftzero.com/securedrop-qubes-workstation/</guid>
      <description>Earlier this year at USENIX Enigma, I presented some recent work towards rearchitecting the SecureDrop journalist experience.
In SecureDrop we currently use an airgapped workstation for viewing documents to reduce the impact of malware present in malicious documents. This presents challenges in terms of maintenance, usability, and even security (i.e. airgaps don&amp;rsquo;t receive automatic updates).
The basic idea of the rearchitecture of the journalist experience is to replace SecureDrop&amp;rsquo;s multi-machine airgap with a single machine using Qubes (Xen) for compartmentalization.</description>
    </item>
    
    <item>
      <title>Using HTTPS Everywhere rules for SecureDrop onion names</title>
      <link>https://www.redshiftzero.com/securedrop-httpse/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.redshiftzero.com/securedrop-httpse/</guid>
      <description>A fun small project I worked on earlier this year was creating an HTTPS Everywhere custom ruleset channel for the SecureDrop project. HTTPS Everywhere is a popular browser extension maintained by EFF that rewrites HTTP URLs to HTTPS when possible. A set of rules is used to determine how URLs should be rewritten. HTTPS Everywhere is included in Tor Browser to reduce the impact of malicious exit nodes.
This is relevant for SecureDrop, because each news organization advertises an onion URL that corresponds to the web application (&amp;ldquo;source interface&amp;rdquo;) where a source should upload documents.</description>
    </item>
    
    <item>
      <title>How SecureDrop Works 101</title>
      <link>https://www.redshiftzero.com/securedrop-101/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.redshiftzero.com/securedrop-101/</guid>
      <description>When people first learn of the SecureDrop architecture, it can seem quite complicated. When explaining SecureDrop to people for the first time, it&amp;rsquo;s useful to have a cartoon view providing a broad overview before digging into further technical details (in my experience this is true of any sufficiently technical concept/system). After noticing this confusion from users, I made this quick one-minute video to distill the most important points for the source and journalist workflows:</description>
    </item>
    
  </channel>
</rss>