<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Redshiftzero</title>
    <link>https://redshiftzero.github.io/tags/security/</link>
    <description>Recent content in Security on Redshiftzero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://redshiftzero.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Continuous threat modeling, Part 1: Tooling wish list</title>
      <link>https://redshiftzero.github.io/continuous-threat-modeling/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/continuous-threat-modeling/</guid>
      <description>Motivation When performing software-centric threat-modeling on an application1, one typically:
 generates at least one Data Flow Diagram (DFD) or other diagrams that model the software, enumerates threats using the diagram(s) as an aid, and then determines which mitigations should be applied.  Automated tools can potentially aid the threat modeler in each of these stages. When the design of a system is modified, the threat modeling exercise may be performed again, resulting in needing to pass through the above steps again.</description>
    </item>
    
    <item>
      <title>Investigating the Signal Protocol, Part 3: Web applications</title>
      <link>https://redshiftzero.github.io/signal-webapps/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-webapps/</guid>
      <description>Next in the series, I investigate current messaging applications that both provide web applications and are using the Signal Protocol (or a protocol very similar or derived from Signal), here specifically Wire and Whatsapp. I&amp;rsquo;m not looking into the voice and video aspects, just the messaging and file sharing capabilities as I&amp;rsquo;m investigating to see how a similar approach could be used for SecureDrop, where voice/video isn&amp;rsquo;t an option. As always, if you have thoughts on this or notice errors, feel free to drop me a note on Twitter or by email.</description>
    </item>
    
    <item>
      <title>Investigating the Signal Protocol, Part 2: Groups, devices</title>
      <link>https://redshiftzero.github.io/signal-group-multidevice/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-group-multidevice/</guid>
      <description>Next in the series, I investigate how groups and multi-device support are handled. If you have thoughts on this or notice any errors, feel free to drop me a note on Twitter or by email.
Groups Signal allows private groups where the server doesn&amp;rsquo;t have access to the group metadata, including the list of members in each group. Servers cannot even distinguish group from direct messages.
Let&amp;rsquo;s say a group contains two users, Aliceüëßüèº and Bobüë¶üèΩ, and a third user Jenüßô wants to send the group a message.</description>
    </item>
    
    <item>
      <title>Investigating the Signal Protocol, Part 1: Foundations</title>
      <link>https://redshiftzero.github.io/signal-protocol/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/signal-protocol/</guid>
      <description>I&amp;rsquo;ve been investigating applications that use the Signal Protocol in order to determine if the Signal Protocol for asynchronous messaging might be appropriate for use for applying to SecureDrop messaging in the future. In this post are some notes from reading the Signal Protocol specifications, which I thought might be a useful reference and explanation for others. If you notice an error, or have other thoughts on anything here, feel free to drop me a note on Twitter or by email.</description>
    </item>
    
    <item>
      <title>Scanning for onion service availability</title>
      <link>https://redshiftzero.github.io/onion-available/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://redshiftzero.github.io/onion-available/</guid>
      <description>Secure The News (STN) is a project by Freedom of the Press Foundation to track and advocate for security and privacy technologies in news organizations. I&amp;rsquo;ve been working a bit on expanding the scope of STN from its original goal, HTTPS adoption, to how news sites treat Tor users.
The first expansion is to scan for onion service availability using the the Onion-Location header (or its presence in a &amp;lt;meta&amp;gt; tag in the site&amp;rsquo;s page content).</description>
    </item>
    
  </channel>
</rss>